#include "mortoncurve.h"

#include <limits>

namespace morton_curve{
	namespace morton_curve_implementation_{

		constexpr uint64_t loadBits2D(uint64_t bit_pattern, uint64_t const bit_position, uint64_t const value, uint64_t const dim){
			// dim = 0 for x; dim = 1 for y

			uint64_t wipe_mask = ~(splitBits2D(0xffff'ffff >> (32u - (bit_position / 2u + 1u))) << dim);
			bit_pattern = splitBits2D(bit_pattern) << dim;
			return (value & wipe_mask) | bit_pattern;
		}

		constexpr auto combine3Bools(bool a, bool b, bool c){
			uint8_t result = 0;

			result |= a ? 0b0100 : 0b0000;
			result |= b ? 0b0010 : 0b0000;
			result |= c ? 0b0001 : 0b0000;

			return result;
		}

		constexpr uint128_t splitBits3D(uint64_t value, uint64_t dim){
			uint128_t result = 0;
			for (uint8_t i = 0; i < 32; ++i) {
				uint128_t bit = (value >> i) & 1;
				result |= (bit << (3 * i + dim));
			}
			return result;
		}

		constexpr uint128_t loadBits3D(uint64_t bit_pattern, uint64_t bit_position, uint128_t value, uint64_t dim){
			// dim = 0 for x; dim = 1 for y; dim = 2 for z

			uint128_t wipe_mask = ~(splitBits3D((1u << (bit_position / 3 + 1)) - 1, dim));
			bit_pattern = splitBits3D(bit_pattern, dim);
			return (value & wipe_mask) | bit_pattern;
		}

	} // namespace morton_curve_implementation_



	uint64_t computeBigMinFromMorton2D(uint64_t const xd, uint64_t z_min, uint64_t z_max){
		using namespace morton_curve_implementation_;

		uint64_t bigmin = 0;
		uint32_t bit_position = 63;
		uint64_t mask = uint64_t{ 1 } << bit_position;

		do{
			auto const dim = bit_position % 2u;
			auto const bit_mask = 0x1 << (bit_position / 2u);

			auto const xd_bit    = xd    & mask;
			auto const z_min_bit = z_min & mask;
			auto const z_max_bit = z_max & mask;

			auto const magic = combine3Bools(xd_bit, z_min_bit, z_max_bit);

			switch(magic){
			case 0b0001:
				bigmin = loadBits2D(bit_mask - 0, bit_position, z_min, dim);
				z_max  = loadBits2D(bit_mask - 1, bit_position, z_max, dim);
				break;
			case 0b0010:
			case 0b0110:
				// not possible because min <= max
				return std::numeric_limits<uint64_t>::max();
			case 0b0011:
				bigmin = z_min;
				return bigmin;
			case 0b0100:
				return bigmin;
			case 0b0101:
				z_min = loadBits2D(bit_mask, bit_position, z_min, dim);
				break;
			default:
				break;
			}

			--bit_position;

			mask >>= 1;
		}while(mask);

		return bigmin;
	}

uint128_t computeBigMinFromMorton3D(uint128_t xd, uint128_t z_min, uint128_t z_max) {
	using namespace morton_curve_implementation_;

	uint128_t bigmin = 0;
	uint32_t bit_position = 127;
	uint128_t mask = uint128_t{ 1 } << bit_position;

	do {
		uint64_t dim = bit_position % 3u;
		uint64_t bit_index = bit_position / 3;
		uint64_t bit_mask = 0x1 << bit_index;

		bool xd_bit    = (xd >> bit_index) & 1;
		bool z_min_bit = (z_min & mask) != 0;
		bool z_max_bit = (z_max & mask) != 0;

		switch (combine3Bools(xd_bit, z_min_bit, z_max_bit)) {
			case 0b0001:
				bigmin = loadBits3D(bit_mask, bit_position, z_min, dim);
				z_max  = loadBits3D(bit_mask - 1, bit_position, z_max, dim);
				break;
			case 0b0010:
			case 0b0110:
				// not possible because min <= max
				// return std::numeric_limits<uint128_t>::max();
				return uint128_t(-1);
			case 0b0011:
				bigmin = z_min;
				return bigmin;
			case 0b0100:
				return bigmin;
			case 0b0101:
				z_min = loadBits3D(bit_mask, bit_position, z_min, dim);
				break;
			default:
				break;
		}

		--bit_position;
		mask >>= 1;
	} while (mask);

	return bigmin;
}


} // namespace morton_curve

