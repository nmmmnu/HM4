#include "protocol/redisprotocol.h"

#include <iostream>

template <class Protocol>
void test(Protocol &p, const char *data){
	using Status = typename Protocol::Status;

	const Status status = p(data);

	std::cout	<< "Result status: " << toString(status) << '\n'
			<< '\n'
	;

	if (status == Status::OK)
		p.print();

	std::cout	<< "---(eof)---" << '\n'
			<< '\n'
	;
}


int main(){
	net::protocol::RedisProtocol p;

	std::cout << "These should be: OK" << '\n';

	test(p, "*3\r\n$3\r\nSET\r\n$4\r\ncity\r\n$5\r\nSofia\r\n");

	test(p, "*2\r\n$3\r\nGET\r\n$4\r\ncity\r\n");

	std::cout << "These should be: Not read" << '\n';

	test(p, "*3\r\n$3\r\nSET\r\n$1\r\na\r\n$17408\r\n

	std::cout << "These should be: Error" << '\n';

	test(p, "*92\r\n$3\r\nGET\r\n$4\r\ncity\r\n");
	test(p, "$2\r\n$3\r\nGET\r\n$4\r\ncity\r\n");
	test(p, "*2\r\n*3\r\nGET\r\n$4\r\ncity\r\n");



#if 0
	using Status = net::protocol::RedisProtocol::Status;

	const char *data = "*3\r\n$3\r\nSET\r\n$4\r\ncity\r\n$5\r\nSofia\r\n";

	for(int i = 0; i < 2500000; ++i){
		const auto &status = p(data);

		if (status == Status::BUFFER_NOT_READ)
			std::cout << "problem" << '\n';
	}
#endif
}
